i 1 0 11 0 0 0 0 0 11 0:
/*
 *
 */

if ()
{
}
else
{
}
w 1 0 8 0 0 0 0 0 8 0:
/*
 *
 */

while ()
{
}
d 1 0 8 0 0 0 0 0 8 0:
/*
 *
 */

do
{
}   while ();
s 1 0 11 0 0 0 0 0 11 2:/*
 *
 */

switch()
{
    case    :
        break;
    default:
        break;
}
f 1 0 8 0 0 0 0 0 8 0:
/*
 *
 */

for ( ; ; )
{
}
n 1 0 1 0 0 0 0 0 1 11:#include <>
l 0 10 23 0 0 4 4 0 13 5:class
{
    public:
        ()
        {
        }
        ~()
        {
        }
    
    private:
        
};
a 0 7 16 0 0 0 0 0 9 3:/**
 *
 *  \param
 */

/***************************************************************************
 * History: 
 *
 ***************************************************************************/
b 1 7 10 0 0 0 0 0 3 2:/*
 *
 */
g 0 15 20 0 0 5 5 0 5 3:/**
 * \defgroup name description
 *  @{
 */
/** @} */
c 0 0 10 0 0 0 0 0 10 76:/***************************************************************************
 * Description:
 *
 * Arguments:
 *
 * Returns:
 *
 * History: 
 *
 ***************************************************************************/
u 0 0 15 0 0 0 0 0 15 76:/***************************************************************************
 * Description:
 *
 * Arguments:
 *
 * Returns:
 *
 * History: 
 *
 ***************************************************************************/

()

{
}
m 0 0 23 0 0 0 3 0 23 42:#include <iostream>     // cin, cout, cerr
#include <sysexits.h>   // Standardized exit codes EX_OK, EX_USAGE, etc.

/*
 *  "using namespace" should be limited to the narrowest scope possible
 *  in order to maximize the benefit of reducing name collisions.
 *  Best case: Inside a function or even smaller block
 *  OK: Top of a source file
 *  Worst case: In a header file
 */

using namespace std;

int     main(int argc,char *argv[])

{
    switch(argc)
    {
        default:
            break;
    }
    return EX_OK;
}
