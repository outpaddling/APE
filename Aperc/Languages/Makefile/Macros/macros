s 0 0 163 0 0 0 143 0 163 76:############################################################################
#
#              Another Programmer's Editor Makefile Template
#
# This is a template Makefile for a simple static library.
# It is meant to serve as a starting point for creating a portable
# Makefile, suitable for use under ports systems like *BSD ports,
# MacPorts, Gentoo Portage, etc.  It contains examples of most common
# Makefile components you will need.  
#
# For most small projects, you should be able to create a usable
# Makefile from this template by assigning the appropriate values
# to variables like BIN1, LIB1, etc., and removing everything you
# don't need.
#
# For more complex projects, start with the advanced Makefile.
#
# Variables that are conditionally assigned (with ?=) can be overridden
# on the command line as follows:
#
#       make VAR=value
#
# They can also inheret values from parent Makefiles (as in *BSD ports).
# This allows different systems to use the Makefile without modifications.
# For example, MacPorts installs to /opt/local instead of /usr/local,
# and hence might use the following:
# 
#       make PREFIX=/opt/local
#
# Lastly, they can be overridden by the environment.  I like to add -Wall
# to my CFLAGS for development, without having to put it in the Makefile,
# since it's a gcc specific flag.  Hence, I have the following in my
# .cshrc on gcc-based systems (BSD, Linux, Mac OS X):
# 
#       setenv CFLAGS "-O -Wall -pipe"
#
# Different systems may also use different compilers and keep libraries in
# different locations:
#
#       make CC=gcc CFLAGS=-O2 LFLAGS1="-L/usr/X11R6 -lX11"
#
# Variables can also be appended in the Makefile (with +=), so that
# flags specified on the command line can be combined with those in
# the Makefile.
############################################################################

############################################################################
# Installed targets

LIB     = libmylib.a
HEADERS = mylib.h
MAN     = mylib.3

############################################################################
# List object files that comprise BIN.

OBJS    = file1.o file2.o

############################################################################
# Compile, link, and install options

# Install in /usr/local, unless defined by the parent Makefile, the
# environment, or a command line option such as PREFIX=/opt/local.
PREFIX      ?= /usr/local
MANPREFIX   ?= ${PREFIX}

# Where to find local libraries and headers.  For MacPorts, override
# with "make LOCALBASE=/opt/local"
LOCALBASE   ?= ${PREFIX}

############################################################################
# Build flags
# Override with "make CC=gcc", "make CC=icc", etc.
# Do not add non-portable options (such as -Wall) using +=

# Portable defaults.  Can be overridden by mk.conf or command line.
CC          ?= gcc
CFLAGS      ?= -Wall -g

CXX         ?= g++
CXXFLAGS    ?= -Wall -g

CPP         ?= cpp

AR          ?= ar
RANLIB      ?= ranlib

INCLUDES    += -I${LOCALBASE}/include
CFLAGS      += ${INCLUDES}

############################################################################
# Assume first command in PATH.  Override with full pathnames if necessary.
# E.g. "make INSTALL=/usr/local/bin/ginstall"
# Do not place flags here (e.g. RM = rm -f).  Just provide the command
# and let each usage dictate the flags.

MKDIR   ?= mkdir
INSTALL ?= install
LN      ?= ln
RM      ?= rm
PRINTF  ?= printf

############################################################################
# Archive rules

all:    ${LIB}

${LIB}: ${OBJS}
        ${AR} r ${LIB} ${OBJS}
        ${RANLIB} ${LIB}

############################################################################
# Include dependencies generated by "make depend", if they exist.
# These rules explicitly list dependencies for each object file.
# See "depend" target below.  If Makefile.depend does not exist, use
# generic source compile rules.  These have some limitations, so you
# may prefer to create explicit rules for each target file.  This can
# be done automatically using "cpp -M" or "cpp -MM".  Run "man cpp"
# for more information, or see the "depend" target below.

# Rules generated by "make depend"
include Makefile.depend

############################################################################
# Self-generate dependencies the old-fashioned way

depend:
        rm -f Makefile.depend
        for file in *.c; do \
            ${CPP} ${INCLUDES} -MM $${file} >> Makefile.depend; \
            ${PRINTF} "\t\$${CC} -c \$${CFLAGS} $${file}\n\n" >> Makefile.depend; \
        done

############################################################################
# Remove generated files (objs and nroff output from man pages)

clean:
        rm -f ${OBJS} ${LIB} *.nr

# Keep backup files during normal clean, but provide an option to remove them
realclean: clean
        rm -f .*.bak *.bak *.BAK *.gmon core *.core

############################################################################
# Install all target files (binaries, libraries, docs, etc.)

install: all
        ${MKDIR} -p ${PREFIX}/lib ${PREFIX}/include ${PREFIX}/man/man3
        ${INSTALL} -m 0444 ${LIB} ${PREFIX}/lib
        @for file in ${HEADERS}; do \
            ${INSTALL} -m 0444 $${file} ${PREFIX}/include; \
        done
        ${INSTALL} -m 0444 ${MAN} ${MANPREFIX}/man/man3

############################################################################
# Remove all installed files

uninstall:
        ${RM} ${PREFIX}/lib/${LIB}
        ${RM} ${MANPREFIX}/man/man3/${MAN}
        @for file in ${HEADERS}; do \
            ${RM} ${PREFIX}/include/$${file}; \
        done
d 0 0 159 0 0 0 139 0 159 76:############################################################################
#
#              Another Programmer's Editor Makefile Template
#
# This is a template Makefile for a simple dynamic library.
# It is meant to serve as a starting point for creating a portable
# Makefile, suitable for use under ports systems like *BSD ports,
# MacPorts, Gentoo Portage, etc.  It contains examples of most common
# Makefile components you will need.  
#
# For most small projects, you should be able to create a usable
# Makefile from this template by assigning the appropriate values
# to variables like BIN1, LIB1, etc., and removing everything you
# don't need.
#
# For more complex projects, start with the advanced Makefile.
#
# Variables that are conditionally assigned (with ?=) can be overridden
# on the command line as follows:
#
#       make VAR=value
#
# They can also inheret values from parent Makefiles (as in *BSD ports).
# This allows different systems to use the Makefile without modifications.
# For example, MacPorts installs to /opt/local instead of /usr/local,
# and hence might use the following:
# 
#       make PREFIX=/opt/local
#
# Lastly, they can be overridden by the environment.  I like to add -Wall
# to my CFLAGS for development, without having to put it in the Makefile,
# since it's a gcc specific flag.  Hence, I have the following in my
# .cshrc on gcc-based systems (BSD, Linux, Mac OS X):
# 
#       setenv CFLAGS "-O -Wall -pipe"
#
# Different systems may also use different compilers and keep libraries in
# different locations:
#
#       make CC=gcc CFLAGS=-O2 LFLAGS1="-L/usr/X11R6 -lX11"
#
# Variables can also be appended in the Makefile (with +=), so that
# flags specified on the command line can be combined with those in
# the Makefile.
############################################################################

############################################################################
# Installed targets

LIB     = mylib.so
HEADERS = mylib.h
MAN     = mylib.3

############################################################################
# List object files that comprise BIN.

OBJS    = file1.o file2.o

############################################################################
# Compile, link, and install options

# Install in /usr/local, unless defined by the parent Makefile, the
# environment, or a command line option such as PREFIX=/opt/local.
PREFIX      ?= /usr/local
MANPREFIX   ?= ${PREFIX}

# Where to find local libraries and headers.  For MacPorts, override
# with "make LOCALBASE=/opt/local"
LOCALBASE   ?= ${PREFIX}

############################################################################
# Build flags
# Override with "make CC=gcc", "make CC=icc", etc.
# Do not add non-portable options (such as -Wall) using +=

# Portable defaults.  Can be overridden by mk.conf or command line.
CC          ?= gcc
CFLAGS      ?= -Wall -g

CXX         ?= g++
CXXFLAGS    ?= -Wall -g

CPP         ?= cpp

INCLUDES    += -I${LOCALBASE}/include
CFLAGS      += ${INCLUDES}

############################################################################
# Assume first command in PATH.  Override with full pathnames if necessary.
# E.g. "make INSTALL=/usr/local/bin/ginstall"
# Do not place flags here (e.g. RM = rm -f).  Just provide the command
# and let each usage dictate the flags.

MKDIR   ?= mkdir
INSTALL ?= install
LN      ?= ln
RM      ?= rm
PRINTF  ?= printf

############################################################################
# Archive rules

all:    ${LIB}

${LIB}: ${OBJS}
        ${CC} -shared ${CFLAGS} -o ${LIB} ${OBJS}

############################################################################
# Include dependencies generated by "make depend", if they exist.
# These rules explicitly list dependencies for each object file.
# See "depend" target below.  If Makefile.depend does not exist, use
# generic source compile rules.  These have some limitations, so you
# may prefer to create explicit rules for each target file.  This can
# be done automatically using "cpp -M" or "cpp -MM".  Run "man cpp"
# for more information, or see the "depend" target below.

# Rules generated by "make depend"
include Makefile.depend

############################################################################
# Self-generate dependencies the old-fashioned way

depend:
        rm -f Makefile.depend
        for file in *.c; do \
            ${CPP} ${INCLUDES} -MM $${file} >> Makefile.depend; \
            ${PRINTF} "\t\$${CC} -c \$${CFLAGS} $${file}\n\n" >> Makefile.depend; \
        done

############################################################################
# Remove generated files (objs and nroff output from man pages)

clean:
        rm -f ${OBJS} ${LIB} *.nr

# Keep backup files during normal clean, but provide an option to remove them
realclean: clean
        rm -f .*.bak *.bak *.BAK *.gmon core *.core

############################################################################
# Install all target files (binaries, libraries, docs, etc.)

install: all
        ${MKDIR} -p ${PREFIX}/lib ${PREFIX}/include ${PREFIX}/man/man3
        ${INSTALL} -m 0444 ${LIB} ${PREFIX}/lib
        @for file in ${HEADERS}; do \
            ${INSTALL} -m 0444 $${file} ${PREFIX}/include; \
        done
        ${INSTALL} -m 0444 ${MAN} ${MANPREFIX}/man/man3

############################################################################
# Remove all installed files

uninstall:
        ${RM} ${PREFIX}/lib/${LIB}
        ${RM} ${MANPREFIX}/man/man3/${MAN}
        @for file in ${HEADERS}; do \
            ${RM} ${PREFIX}/include/$${file}; \
        done
a 0 0 231 0 0 0 211 0 231 76:############################################################################
#
#              Another Programmer's Editor Makefile Template
#
# This is a template Makefile for small to medium projects.
# It is meant to serve as a starting point for creating a portable
# Makefile, suitable for use under ports systems like *BSD ports,
# MacPorts, Gentoo Portage, etc.  It contains examples of most common
# Makefile components you will need.  
#
# For most small projects, you should be able to create a usable
# Makefile from this template by assigning the appropriate values
# to variables like BIN1, LIB1, etc., and removing everything you
# don't need.
#
# If you have a very complex project that requires more configurability 
# than this, consider using a Makefile generator such as GNU autotools
# or cmake.
#
# Variables that are conditionally assigned (with ?=) can be overridden
# on the command line as follows:
#
#       make VAR=value
#
# They can also inheret values from parent Makefiles (as in *BSD ports).
# This allows different systems to use the Makefile without modifications.
# For example, MacPorts installs to /opt/local instead of /usr/local,
# and hence might use the following:
# 
#       make PREFIX=/opt/local
#
# Lastly, they can be overridden by the environment.  I like to add -Wall
# to my CFLAGS for development, without having to put it in the Makefile,
# since it's a gcc specific flag.  Hence, I have the following in my
# .cshrc on gcc-based systems (BSD, Linux, Mac OS X):
# 
#       setenv CFLAGS "-O -Wall -pipe"
#
# Different systems may also use different compilers and keep libraries in
# different locations:
#
#       make CC=gcc CFLAGS=-O2 LFLAGS1="-L/usr/X11R6 -lX11"
#
# Variables can also be appended in the Makefile (with +=), so that
# flags specified on the command line can be combined with those in
# the Makefile.
############################################################################

############################################################################
# Files to be installed by make.

BIN1    = program1
BIN2    = program2
BINS    = ${BIN1} ${BIN2}

LIB1    = library1.so
LIB2    = library2.a
LIBS    = ${LIB1} ${LIB2}

HEADERS = header1.h
MAN1    = program1.1
MAN3    = lib1.3
SCRIPTS = script1

############################################################################
# List object files that comprise BIN1, BIN2, LIB1, LIB2, etc.

OBJS1   = program1.o
OBJS2   = program2.o

############################################################################
# Compile, link, and install options
# Override from the command line with "make VAR=value"
# or by setting in the parent Makefile.

# Install in /usr/local, unless defined by the parent Makefile, the
# environment, or a command line option such as PREFIX=/opt/local.
PREFIX  ?= /usr/local
MANPREFIX ?= ${PREFIX}

# Where to find local libraries and headers.  For MacPorts, override
# with "make LOCALBASE=/opt/local"
LOCALBASE ?= ${PREFIX}

############################################################################
# Build flags
# Override with "make CC=gcc", "make CC=icc", etc.
# Do not add non-portable options (such as -Wall) using +=

# Portable defaults.  Can be overridden by mk.conf or command line.
CC      ?= cc
CFLAGS  ?= -O

CXX     ?= c++

LD      = ${CC}

CPP     ?= cpp

INCLUDES+= -I${LOCALBASE}/include

CFLAGS  += ${INCLUDES}
CXXFLAGS?= ${INCLUDES}

LFLAGS1 += -L${LOCALBASE}/lib
LFLAGS2 += -L${LOCALBASE}/lib

############################################################################
# Assume first command in PATH.  Override with full pathnames if necessary.
# E.g. "make INSTALL=/usr/local/bin/ginstall"
# Do not place flags here (e.g. RM = rm -f).  Just provide the command
# and let each usage dictate the flags.

INSTALL ?= install
LN      ?= ln
RM      ?= rm
AR      ?= ar
PRINTF  ?= printf

############################################################################
# Standard targets required by ports

all:    ${BINS} ${LIBS}

# Link rules
${BIN1}:        ${OBJS1}
        ${LD} -o ${BIN1} ${OBJS1} ${LFLAGS1}

${BIN2}:        ${OBJS2}
        ${LD} -o ${BIN2} ${OBJS2} ${LFLAGS2}

# Static library
${LIB1}:        ${OBJS1}
        ${AR} r ${LIB1} ${OBJS1}

# Dynamic library
${LIB2}:        ${OBJS1}
        ${LD} -shared -o ${LIB2} ${OBJS1}


############################################################################
# Include dependencies generated by "make depend", if they exist.
# These rules explicitly list dependencies for each object file.
# See "depend" target below.  If Makefile.depend does not exist, use
# generic source compile rules.  These have some limitations, so you
# may prefer to create explicit rules for each target file.  This can
# be done automatically using "cpp -M" or "cpp -MM".  Run "man cpp"
# for more information, or see the "depend" target below.

# Rules generated by "make depend"
include Makefile.depend


############################################################################
# Self-generate dependencies the old-fashioned way

depend:
        rm -f Makefile.depend
        for file in *.c; do \
            ${CPP} ${INCLUDES} -MM $${file} >> Makefile.depend; \
            ${PRINTF} "\t\$${CC} -c \$${CFLAGS} $${file}\n\n" >> Makefile.depend; \
        done


############################################################################
# Generate a header containing prototypes for C files.  Requires
# the cproto command, which is freely available on the WEB.

protos:
        (cproto ${INCLUDES} *.c > temp_protos.h && mv -f temp_protos.h protos.h)


############################################################################
# Remove generated files (objs and nroff output from man pages)

clean:
        rm -f ${OBJS} ${BINS} ${LIBS} *.nr

# Keep backup files during normal clean, but provide an option to remove them
realclean: clean
        rm -f .*.bak *.bak *.BAK *.gmon


############################################################################
# Install all target files (binaries, libraries, docs, etc.)

install: all
        ${MKDIR} -p ${PREFIX}/bin ${PREFIX}/lib ${PREFIX}/include \
                ${PREFIX}/man/man1
        @for file in ${BINS} ; do \
            ${INSTALL} -s -c -m 0555 $${file} ${PREFIX}/bin; \
        done
        @for file in ${SCRIPTS} ; do \
            ${INSTALL} -c -m 0555 $${file} ${PREFIX}/bin; \
        done
        @for file in ${HEADERS} ; do \
            ${INSTALL} -c -m 0444 $${file} ${PREFIX}/include; \
        done
        @for file in ${LIBS} ; do \
            ${INSTALL} -c -m 0444 $${file} ${PREFIX}/lib; \
        done
        @for file in ${MAN1} ; do \
            ${INSTALL} -c -m 0444 $${file} ${MANPREFIX}/man/man1; \
        done
        @for file in ${MAN3} ; do \
            ${INSTALL} -c -m 0444 $${file} ${MANPREFIX}/man/man3; \
        done


############################################################################
# Remove all installed files

uninstall:
        @for file in ${BINS} ; do \
            ${RM} ${PREFIX}/bin/$${file}; \
        done
        @for file in ${SCRIPTS} ; do \
            ${RM} ${PREFIX}/bin/$${file}; \
        done
        @for file in ${HEADERS} ; do \
            ${RM} ${PREFIX}/include/$${file}; \
        done
        @for file in ${LIBS} ; do \
            ${RM} ${PREFIX}/lib/$${file}; \
        done
        @for file in ${MAN1} ; do \
            ${RM} ${MANPREFIX}/man/man1/$${file}; \
        done
        @for file in ${MAN3} ; do \
            ${RM} ${MANPREFIX}/man/man3/$${file}; \
        done
p 0 0 171 0 0 0 151 0 171 76:############################################################################
#
#              Another Programmer's Editor Makefile Template
#
# This is a template Makefile for a simple program.
# It is meant to serve as a starting point for creating a portable
# Makefile, suitable for use under ports systems like *BSD ports,
# MacPorts, Gentoo Portage, etc.
#
# The goal is to create a Makefile that can be used without modifications
# on any Unix-compatible system.
#
# Variables that are conditionally assigned (with ?=) can be overridden
# on the command line as follows:
#
#       make VAR=value
#
# For example, MacPorts installs to /opt/local instead of /usr/local,
# and hence might use the following:
# 
#       make PREFIX=/opt/local
#
# Different systems may also use different compilers and keep libraries in
# different locations:
#
#       make CC=gcc CFLAGS=-O2 LDFLAGS="-L/usr/X11R6 -lX11"
#
# Variables can also inheret values from parent Makefiles (as in *BSD ports).
#
# Lastly, they can be overridden by the environment, e.g.
# 
#       setenv CFLAGS "-O -Wall -pipe"
#       make
#
# All these override methods allow the Makefile to respect the environment
# in which it is used.
#
# You can append values to variables within this Makefile (with +=).
# However, this should not be used to add compiler-specific flags like
# -Wall, as this would disrespect the environment.
############################################################################

############################################################################
# Executable.  Replace "program" with the name of your program.

BIN     = program
MAN     = program.1

############################################################################
# List object files that comprise BIN.  Replace these with the names of
# your object files.

OBJS    = main.o file2.o

############################################################################
# Compile, link, and install options

# Install in /usr/local, unless defined by the parent Makefile, the
# environment, or a command line option such as PREFIX=/opt/local.
PREFIX      ?= /usr/local
MANPREFIX   ?= ${DESTDIR}${PREFIX}

# Where to find local libraries and headers.  For MacPorts, override
# with LOCALBASE=/opt/local.
LOCALBASE   ?= /usr/local

############################################################################
# Build flags
# Override with "make CC=gcc", "make CC=icc", etc.
# Make sure all compilers are part of the same toolchain.  Do not mix
# compilers from different vendors or different compiler versions unless
# you know what you're doing.

# Portable defaults.  Can be overridden by mk.conf or command line.
CC          ?= cc
CFLAGS      ?= -Wall -g -O

CXX         ?= c++
CXXFLAGS    ?= -Wall -g -O

F77         ?= f77
FC          ?= f90
FFLAGS      ?= -g -O

# Link command:
# Use ${FC} to link when mixing C and Fortran
# Use ${CXX} to link when mixing C and C++
# When mixing C++ and Fortran, use ${FC} and -lstdc++ or ${CXX} and -lgfortran
LD          = ${CC}

CPP         ?= cpp

INCLUDES    += -I${LOCALBASE}/include
CFLAGS      += ${INCLUDES}
CXXFLAGS    += ${INCLUDES}
FFLAGS      += ${INCLUDES}
LDFLAGS     += -L${LOCALBASE}/lib

############################################################################
# Do not place flags here (e.g. RM = rm -f).  Just provide the command
# and let each usage dictate the flags.

CP      ?= /bin/cp
MV      ?= /bin/mv
MKDIR   ?= /bin/mkdir
LN      ?= /bin/ln
RM      ?= /bin/rm

# No full pathnames for these.  Allow PATH to dtermine which one is used
# in case a locally installed version is preferred.
AR      ?= ar
PRINTF  ?= printf
INSTALL ?= install

############################################################################
# Standard targets required by ports

all:    ${BIN}

# Link rules
${BIN}: ${OBJS}
        ${LD} -o ${BIN} ${OBJS} ${LDFLAGS}

############################################################################
# Include dependencies generated by "make depend", if they exist.
# These rules explicitly list dependencies for each object file.
# See "depend" target below.  If Makefile.depend does not exist, use
# generic source compile rules.  These have some limitations, so you
# may prefer to create explicit rules for each target file.  This can
# be done automatically using "cpp -M" or "cpp -MM".  Run "man cpp"
# for more information, or see the "depend" target below.

# Rules generated by "make depend"
# If Makefile.depend does not exist, "touch" it before running "make depend"
include Makefile.depend

############################################################################
# Self-generate dependencies the old-fashioned way
# Edit filespec and compiler command if not using just C source files

depend:
        rm -f Makefile.depend
        for file in *.c *.cc; do \
            ${CPP} ${INCLUDES} -MM $${file} >> Makefile.depend; \
            ${PRINTF} "\t\$${CC} -c \$${CFLAGS} $${file}\n\n" >> Makefile.depend; \
        done

############################################################################
# Remove generated files (objs and nroff output from man pages)

clean:
        rm -f ${OBJS} ${BIN} *.nr

# Keep backup files during normal clean, but provide an option to remove them
realclean: clean
        rm -f .*.bak *.bak *.BAK *.gmon core *.core

############################################################################
# Install all target files (binaries, libraries, docs, etc.)

install: all
        ${MKDIR} -p ${DESTDIR}${PREFIX}/bin ${DESTDIR}${PREFIX}/man/man1
        ${INSTALL} -s -m 0555 ${BIN} ${DESTDIR}${PREFIX}/bin
        ${INSTALL} -m 0444 ${MAN} ${DESTDIR}${MANPREFIX}/man/man1

############################################################################
# Remove all installed files

uninstall:
        ${RM} ${PREFIX}/bin/${BIN}
        ${RM} ${MANPREFIX}/man/man1/${MAN}
